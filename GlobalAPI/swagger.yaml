# TODO Error responses and validation of dates
openapi: 3.0.2
info:
  description: "Documentation for IPLeiria SmartCampus' API"
  version: "1.0.0"
  title: "IPLeiria SmartCampus"
servers:
  - url: "http://localhost/api"
tags:
- name: "api"
  description: "Information about the API"
- name: "sensors"
  description: "Information about the sensors"
- name: "locations"
  description: "Information about the locations"
- name: "readings"
  description: "Readings of a sensor or location"
- name: "alerts"
  description: "User generated alerts (TODO: Filter by sensor/location?)"
security:
- api_key: []
components:
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "token"
      in: "header"
      description: "The token to access to the API (generated by the DSA)"
  schemas:
    ApiStatus:
      type: "object"
      properties:
        version:
          type: "string"
          example: "1.0.0"
          
    Location:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        name:
          type: "string"
          example: "1ยบ piso da biblioteca"
          
    Sensor:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        user_id:
          type: "integer"
          example: null
          nullable: true
        location_id:
          type: "integer"
          example: 1
          nullable: true
          description: "If `null`, a location must be provided every time a reading is inserted"
        description:
          type: "string"
          example: "DHT"
          nullable: true
        personal:
          type: "boolean"
          example: false
        valid:
          type: "boolean"
          example: true
        fields:
          type: "array"
          items:
            $ref: "#/components/schemas/SensorField"
        date:
          type: "string"
          format: "date-time"
          example: "2019-12-02T11:29:50.00Z"
    SensorField:
      type: "object"
      properties:
        name:
          type: "string"
          example: "temperature"
        type:
          type: "string"
          example: "float"
        min_value:
          type: "string"
          example: "-20"
          description: "The minimum value a sensor can read; values below `min_value` will be discarded"
        max_value:
          type: "string"
          example: "60"
          description: "The maximum value a sensor can read; values above `max_value` will be discarded"
    SensorData:
      type: "object"
      properties:
        sensor_id:
          type: "number"
          format: "integer"
          example: 1
        location_id:
          type: "number"
          format: "integer"
          example: 1
        humidity:
          type: "number"
          format: "float"
          example: 64.3
          description: "Example only; each sensor has specific fields (see `fields` of `Sensor`)"
        temperature:
          type: "number"
          format: "float"
          example: 15.6
          description: "Example only; each sensor has specific fields (see `fields` of `Sensor`)"
        valid:
          type: "boolean"
          example: true
        date:
          type: "string"
          format: "date-time"
          example: "2019-12-02T11:29:50.00Z"
    Alert:
      # TODO Add sensor and location?
      type: "object"
      properties:
        id:
          type: "number"
          format: "integer"
          example: 1
        user_name:
          type: "string"
          example: "John Doe"
        description:
          type: "string"
          example: "Temperature too high"
        timestamp:
          type: "string"
          format: "date-time"
          example: "2019-12-02T11:29:50.00Z"
paths:
  /:
    get:
      tags:
      - "api"
      summary: "Get the API version"
      security: []
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiStatus'
  
  /sensors:
    get:
      tags:
      - "sensors"
      summary: "Get all the sensors"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Sensor'
    post:
      tags:
      - "sensors"
      summary: "Add a new personal sensor"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                location_id:
                  type: "integer"
                  nullable: true
                  example: 1
                  description: "If `null`, a location must be provided every time a reading is inserted"
                description:
                  type: "string"
                  example: "DHT"
                fields:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/SensorField"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
              example:
                id: 2
                user_id: 1
                location_id: 1
                description: "DHT"
                personal: true
                valid: true
                fields:
                  - name: "temperature"
                    type: "float"
                    min_value: "-20"
                    max_value: "60"
                date: "2019-12-02T11:29:50.00Z"
  /sensors/{id}:
    get:
      tags:
      - "sensors"
      summary: "Get one sensor"
      parameters:
      - name: "id"
        in: "path"
        description: "Sensor ID"
        required: true
        schema:
          type: "integer"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
                
  /locations:
    get:
      tags:
      - "locations"
      summary: "Get all the locations"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Location'
  /locations/{id}:
    get:
      tags:
      - "locations"
      summary: "Get one location"
      parameters:
      - name: "id"
        in: "path"
        description: "Location ID"
        required: true
        schema:
          type: "integer"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
  /readings:
    post:
      tags:
      - "readings"
      summary: "Add a new sensor reading"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                sensor_id:
                  type: "integer"
                  example: 1
                location_id:
                  type: "integer"
                  nullable: true
                  example: 1
                  description: "If the sensor `location_id` is `null`, a location must be provided"
                temperature:
                  description: "Example only; each sensor has specific fields (see `fields` of `Sensor`)"
                  type: "number"
                  format: "float"
                  example: 15.6
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensorData'
  /readings/{id}:
    delete:
      tags:
      - "readings"
      summary: "Invalidates a reading"
      parameters:
      - name: "id"
        in: "path"
        description: "Reading ID"
        required: true
        schema:
          type: "integer"
      responses:
        "401":
          description: "Unauthorized"
        "204":
          description: "Success"
  /readings/sensor/{id}:
    get:
      tags:
      - "readings"
      summary: "Get readings for a sensor"
      description: "This endpoint supports getting the readings between a time interval by providing a `start_date` and/or a `end_date`."
      parameters:
      - name: "id"
        in: "path"
        description: "Sensor ID"
        required: true
        schema:
          type: "integer"
      - name: "start_date"
        in: "query"
        description: "Start date (ex: 2019-12-02T11:29:50.00Z)"
        schema:
          type: "string"
          format: "date-time"
      - name: "end_date"
        in: "query"
        description: "End date (ex: 2019-12-02T11:29:50.00Z)"
        schema:
          type: "string"
          format: "date-time"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SensorData"
  /readings/sensor/{id}/latest:
    get:
      tags:
      - "readings"
      summary: "Get the latest valid sensor readings"
      parameters:
      - name: "id"
        in: "path"
        description: "Sensor ID"
        required: true
        schema:
          type: "integer"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SensorData"
                
  /readings/location/{id}:
    get:
      tags:
      - "readings"
      summary: "Get readings for a location"
      description: "This endpoint supports getting the readings between a time interval by providing a `start_date` and/or a `end_date`."
      parameters:
      - name: "id"
        in: "path"
        description: "Location ID"
        required: true
        schema:
          type: "integer"
      - name: "start_date"
        in: "query"
        description: "Start date (ex: 2019-12-02T11:29:50.00Z)"
        schema:
          type: "string"
          format: "date-time"
      - name: "end_date"
        in: "query"
        description: "End date (ex: 2019-12-02T11:29:50.00Z)"
        schema:
          type: "string"
          format: "date-time"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SensorData"
  /readings/location/{id}/latest:
    get:
      tags:
      - "readings"
      summary: "Get the latest valid readings for a location"
      parameters:
      - name: "id"
        in: "path"
        description: "Location ID"
        required: true
        schema:
          type: "integer"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SensorData"
                
  /alerts:
    get:
      tags:
      - "alerts"
      summary: "Get triggered user generated alerts"
      description: "This endpoint supports getting the readings between a time interval by providing a `start_date` and/or a `end_date`."
      parameters:
      - name: "start_date"
        in: "query"
        description: "Start date (ex: 2019-12-02T11:29:50.00Z)"
        schema:
          type: "string"
          format: "date-time"
      - name: "end_date"
        in: "query"
        description: "End date (ex: 2019-12-02T11:29:50.00Z)"
        schema:
          type: "string"
          format: "date-time"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Alert"